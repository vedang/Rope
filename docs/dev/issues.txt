=============
 Rope Issues
=============


Unresolved Issues
=================

* not applying all commenting mechanisms always in codeassist
* fixing tries before current line in code_assist
* searching all files when extracting a global method?
* better tests in `patchedasttest`
* import actions with more that one phase and filtering problems
* handle long imports should work on filtered imports unconditionally?
* adding restructuring scope; local scope, module, all files?
* changing `codeanalyze.WordFinder` to use ASTs?
* refactoring codeanalyze; lots of estimations
* assignment to parameters in inline method
* extracting subexpressions; look at `extracttest` for more info
* remove ``change occurreces`` refactoring?
* using similarfinder in introduce_parameter?
* switching to GPLv3?
* removing unused refactorings?
* unignored files that are not under version control
* multiple ropes on one project; problems for objectdb and history
* should `rope.base` be thread safe?
* inline fails when there is an arg mismatch
* evaluate function parameter defaults in staticoi?
* recursive SOI; Go where the calls go with limited depth
* adding ``do when unsure`` config to all refactorings?
* importing star and removing self imports; stack overflow
* python c extensions
* supporting modules without source code and zip imports
* extract class
* analyzing function decorators
* generate ... and implicit interfaces
* generate method and class hierarchies
* lambdas as functions; consider their parameters
* renaming similarly named variables
* handling the return type of ``yield`` keyword
* extracting methods from pieces with only one return/yield statement


To Be Reviewed
==============

* how concluded data are held for star imports


Insert Before In Restructurings
===============================

Consider a restructuring like this::

  pattern: ${?a} if ${?b} else ${?c}
  goal: replacement
  before: if ${?b}:\n    replacement = ${?a}\nelse:\n    replacement = ${?c}


Memory Management
=================

These are the places in which rope spends most of the memory it
consumes:

* PyCore: for storing PyModules
* ObjectInfo: for storing object information
* History: for storing changes

We should measure the amount of memory each of them use to make
decisions.


Getting Ready For Python 3.0
============================

This has been moved to a separate branch.
